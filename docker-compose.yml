version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: aigateway-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-aigateway}
      POSTGRES_USER: ${DB_USER:-aigateway}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aigateway}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - aigateway-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    container_name: aigateway-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-aigateway}:${DB_PASSWORD:-changeme}@db:5432/${DB_NAME:-aigateway}
      - SECRET_KEY=${SECRET_KEY:-will-be-generated}
      - AI_PROVIDER=${AI_PROVIDER:-demo}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://localhost:11434}
      - MS_TENANT_ID=${MS_TENANT_ID:-}
      - MS_CLIENT_ID=${MS_CLIENT_ID:-}
      - MS_CLIENT_SECRET=${MS_CLIENT_SECRET:-}
    volumes:
      - ./backend/app:/app/app
      - ./data/uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-5555}:8000"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aigateway-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION:-20}
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5555}
    container_name: aigateway-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5555/api/v1
      - NEXT_PUBLIC_APP_NAME=AI Gateway
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    ports:
      - "${FRONTEND_PORT:-5556}:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aigateway-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: aigateway-proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    profiles:
      - production
    networks:
      - aigateway-network

volumes:
  postgres_data:
    driver: local

networks:
  aigateway-network:
    driver: bridge
